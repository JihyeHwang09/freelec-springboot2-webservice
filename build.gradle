buildscript {
    // ext: build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
    // springBootVersion이라는 전역변수를 생성하고 그 값을 '2.1.7.RELEASE'로 한다.
    // ->
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // spring-boot-gradle-plugin을 의존성을 받는다는 의미임
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// io.spring.dependency-management은 스프링 부트의 의존성들을 관리해주는 플러그인
// -> 꼭 추가해야 한다!
apply plugin: 'io.spring.dependency-management'


group 'com.phang.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

/*
 repositories
 : 각종 의존성(라이브러리들)을 어떤 원격 저장소에서 받을 지를 정한다.
    기본적으로 mavenCentral을 많이 사용하지만,
    최근에는 라이브러리 업로드 난이도 때문에 jcenter()도 많이 사용함
    이번에는 mavenCentral, jcenter 둘 다 사용함
 */
repositories {
    mavenCentral()
    // jcenter(): 라이브러리 업로드를 간단하게 함
    jcenter()
}

/*
 dependencies
 : 프로젝트 개발에 필요한 의존성들을 선언하는 곳
   cf) 인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리한다.
   -> 커뮤니티 버전을 사용해도 의존성 자동완성이 가능
 */

dependencies {
    // compile 메서드 안에 라이버리르이 이름 앞부분만 추가한 뒤 자동완성 클릭시, 그레이들이 변경된 내용을 자동으로 반영하기 시작한다.
    compile('org.springframework.boot:spring-boot-starter-web')

    compile('org.springframework.boot:spring-boot-devtools')
    /*
     롬복은 프로젝트마다 설정해야 한다.
     플러그인 설치는 한 번만 하면 되지만,
     1. build.gradle에 라이브러리를 추가하는 것
     2. Enable annotation processing을 체크하는 것
     -> 이 두 가지는 프로젝트마다 진행해야 한다.  
     */
    compile('org.projectlombok:lombok')

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    /*
    spring-boot-stater-data-jpa
        - 스프링 부트용 Spring Data Jpa 추상화 라이브러리
        - 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리해준다.
     */
    compile('com.h2database:h2')
    /*
    h2
        - 인메모리형 관계형 데이터베이스
        - 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있다.
        - 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트용으로 많이 사용됨
        - 여기에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정
     */
    compile('org.springframework.boot:spring-boot-starter-mustache')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}